document.addEventListener("click", (e) => {
  let t = e.target.closest("[data-step-id]");
  if (!t) return;
  let r = t.dataset.stepId,
    a = document.querySelector(".price-constructor__step--active"),
    o = document.querySelector(`.price-constructor__step[data-step-id="${r}"]`),
    c = document.querySelector(".price-constructor__button--active"),
    s = document.querySelector(
      `.price-constructor__button[data-step-id="${r}"]`
    );
  a.classList.remove("price-constructor__step--active"),
    o.classList.add("price-constructor__step--active"),
    c.classList.remove("price-constructor__button--active"),
    s.classList.add("price-constructor__button--active");
});
const carMakeSelectEl = document.getElementById("car-make"),
  carModelSelectEl = document.getElementById("car-model"),
  carYearSelectEl = document.getElementById("car-year"),
  bgColorSelectEl = document.getElementById("rug-background-color"),
  outlineColorSelectEl = document.getElementById("rug-outline-color"),
  rugImage = document.querySelector(
    '[data-step-id="2"] .constructor-step__image img'
  ),
  carMakeSelect = NiceSelect.bind(carMakeSelectEl, { searchable: !0 }),
  carModelSelect = NiceSelect.bind(carModelSelectEl, { searchable: !0 }),
  carYearSelect = NiceSelect.bind(carYearSelectEl, { searchable: !0 }),
  bgColorSelect = NiceSelect.bind(bgColorSelectEl),
  outlineColorSelect = NiceSelect.bind(outlineColorSelectEl);
bgColorSelect.update(), outlineColorSelect.update();
let counstructorUserData = {
  carMake: "",
  carModel: "",
  carYear: "",
  rugBackgroundColor: "beige",
  rugOutlineColor: "beige",
  setType: "",
  hasThrust: !1,
};
const marksUrl = "https://api.auto.ria.com/categories/1/marks/";
async function getModelsByMake(e) {
  let t = await fetch(
      "https://api.auto.ria.com/categories/1/marks/" + e + "/models"
    ),
    r = await t.json();
  return r;
}
function handleCarSelect(e) {
  let t = e.target,
    r = t.name,
    a = t.value;
  counstructorUserData[r] = a;
}
function handleColorSelect(e) {
  handleCarSelect(e),
    (rugImage.src = `../static/images/price-constructor/color-combinations/${counstructorUserData.rugBackgroundColor}-${counstructorUserData.rugOutlineColor}.jpg`);
}
document.addEventListener("DOMContentLoaded", async () => {
  let e = new Date(),
    t = 1990,
    r = +e.getFullYear();
  for (let a = t; a <= r; a++) {
    let o = `<option value="${a}">${a}</option>`;
    carYearSelectEl.insertAdjacentHTML("beforeend", o);
  }
  carYearSelect.update();
}),
  carMakeSelectEl.addEventListener("change", async (e) => {
    let t = e.target,
      r = t.value,
      a = t.options[t.selectedIndex].textContent;
    (counstructorUserData.carMake = a), (counstructorUserData.carModel = "");
    let o = await getModelsByMake(r);
    o &&
      ((carModelSelectEl.innerHTML =
        '<option selected="true" value="none" disabled="disabled">Car model</option>'),
      o.forEach((e) => {
        let t = `<option value="${e.name}">${e.name}</option>`;
        carModelSelectEl.insertAdjacentHTML("beforeend", t);
      }),
      carModelSelect.update());
  }),
  carModelSelectEl.addEventListener("change", handleCarSelect),
  carYearSelectEl.addEventListener("change", handleCarSelect),
  bgColorSelectEl.addEventListener("change", handleColorSelect),
  outlineColorSelectEl.addEventListener("change", handleColorSelect);
const thrustBearerCheck = document.getElementById("thrust-bearer");
document.addEventListener("click", (e) => {
  let t = e.target.closest(".card-step__button");
  if (!t) return;
  let r = t.value;
  (counstructorUserData[t.name] = r),
    "ekonom" !== r &&
      ((counstructorUserData.hasThrust = !0), (thrustBearerCheck.checked = !1));
  let a = document.querySelector(".card-step--active");
  a && a.classList.remove("card-step--active"),
    t.closest(".card-step").classList.add("card-step--active");
}),
  thrustBearerCheck.addEventListener("change", (e) => {
    counstructorUserData.hasThrust = e.target.checked;
  });
const constructorForm = document.getElementById("price-constructor-form"),
  giftForm = document.getElementById("gift-form"),
  feedbackForm = document.getElementById("feedback-form"),
  baseUrl = "http://127.0.0.1:5000",
  submitToast = {
    text: "Your message was sent successfully!",
    duration: 6e3,
    close: !0,
    gravity: "bottom",
    position: "right",
    stopOnFocus: !0,
    className: "form-submit-toast",
  };
async function sendPost(e, t) {
  return fetch(t, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(e),
  }).then((e) => {
    if (e.ok) return e.json();
    throw Error("Something went wrong!");
  });
}
feedbackForm.addEventListener("submit", async (e) => {
  e.preventDefault();
  let t = e.target["user-email"],
    r = e.target["user-name"],
    a = e.target["user-message"];
  Toastify({
    ...submitToast,
    text: "Your message was sent successfully!",
  }).showToast(),
    (r.value = ""),
    (t.value = ""),
    (a.value = "");
}),
  giftForm.addEventListener("submit", async (e) => {
    e.preventDefault();
    let t = e.target["user-phone"];
    Toastify({ ...submitToast }).showToast(), (t.value = "");
  }),
  constructorForm.addEventListener("submit", async (e) => {
    e.preventDefault();
    let t = e.target["user-name"],
      r = e.target["user-email"],
      a = e.target["user-phone"];
    (counstructorUserData = {
      ...counstructorUserData,
      userName: t.value,
      userEmail: r.value,
      userPhone: a.value,
    }),
      Toastify({ ...submitToast }).showToast(),
      (t.value = ""),
      (r.value = ""),
      (a.value = "");
  });
